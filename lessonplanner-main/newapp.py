import sys
import time
import asyncio
import streamlit as st
from ollama import chat
import re
# Function to get LLama response


def getPlan(input_text, no_hours, level):
    messages = [
        {
            'role': 'user',
            'content': f"Generate a lesson plan for {no_hours} hours on {input_text} with a difficulty level of {level}. "
        },
    ]
    response = chat('lessonPlanner', messages=messages)
    return response['message']['content']

# Streamlit UI


def main():
    st.set_page_config(page_title="Generate plan",
                       page_icon='üñ•Ô∏è',
                       layout='wide',
                       initial_sidebar_state='expanded')

    st.sidebar.title("Navigation")
    page = st.sidebar.radio(
        "Go to", ["Generate Plan", "View Plan", "Summarize content"])

    if page == "Generate Plan":
        generate_plan()
    elif page == "View Plan":
        generated_plan()
    elif page == "Summarize content":
        summarize_content()

# Function for generating plan


def save_response_to_file(response):
    with open("generated_plan.txt", "w") as file:
        file.write(response)


def generate_plan():
    st.title("Generate plan üñ•Ô∏è")

    input_text = st.text_input("Enter the Topic")

    col1, col2 = st.columns([8, 8])

    with col1:
        no_hours = st.text_input('No of hours')
    with col2:
        level = st.selectbox('Difficulty level',
                             ('beginner', 'intermediate', 'advanced'), index=0)

    submit = st.button("Generate")

    if submit:
        response = getPlan(input_text, no_hours, level)
        st.sidebar.write("## View Plan")
        st.session_state.generated_response = response
        save_response_to_file(response)
        # st.experimental_rerun()


sys.path.append(r'D:/projects/ashish/WebScraper/WebScraper/spiders')

sys.path.append(r'D:/projects/ashish/WebScraper/WebScraper')


def summarize_content():
    st.title("Summarize content üñ•Ô∏è")
    input_text = st.text_input("Enter the Topic")
    submit = st.button("Summarize topic")
    if submit:
        # response = getPlan(input_text, no_hours, level)
        # st.sidebar.write("## View Plan")
        # st.success(fetch_links(input_text))
        import os
        with open("D:/projects/ashish/lessonplanner-main/topic.txt", "w", encoding='utf-8') as file:
            file.write(str(input_text))
        os.system("D:/projects/ashish/a.bat")

        with open("D:/projects/ashish/lessonplanner-main/link.txt", "r") as file:
            lines = file.readlines()
            st.success(lines[0])
        with open("summarized_content.txt", "r") as file:
            lines = file.readlines()
            for line in lines:
                if line.strip():
                    st.success(str(line))


def generated_plan():
    if "generated_response" in st.session_state:
        response = st.session_state.generated_response
        st.write("**Lesson Plan generated by Mistral model**")
        topics = response.split('\n')
        colms = st.columns((2, 2, 1))
        fields = ["**TOPICS**", '****']
        for col, field_name in zip(colms, fields):
            # header
            col.write(field_name)

        for i, topic in enumerate(topics, 1):
            topic = topic.strip().replace("*", "")
            topic = re.sub(r'Subtopic \d+:', '', topic)
            topic = topic.strip()
            col1, col2 = st.columns((2, 1))
            # link=asyncio.run(fetch_links(topic.strip()))
            # time.sleep(5)
            if topic.strip().startswith("Rules"):
                pass
            if topic.strip() and not topic.strip().startswith("Topic"):
                col1.write(topic.strip())
                # col2.write(link[0])
            else:
                col1.write(f"**{topic.strip()}**")  # index


if __name__ == "__main__":
    main()
